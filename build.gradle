plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "jacoco"
    id "idea"
    id "com.adarshr.test-logger" version "4.0.0"
    id "checkstyle"
    id "com.github.spotbugs" version "6.1.3"
}

group "com.github.alexdlaird"
version "2.3.6"

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.google.code.gson:gson:2.12.1"
    implementation "org.yaml:snakeyaml:2.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.11.4"
    testImplementation "org.mockito:mockito-core:5.15.2"
    testImplementation "org.hamcrest:hamcrest:3.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.11.4"
}

tasks.register("createProperties", WriteProperties) {
    outputFile new File(projectDir, "src/main/resources/version.properties")
    property "version", version
    finalizedBy sourcesJar
}
processResources.dependsOn createProperties

tasks.register("printVersion") {
    doLast {
        println(project.findProperty('rootProject').version)
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.destination file("build/reports/jacoco/report.xml")
    }
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}

spotbugs {
    excludeFilter = file("config/spotbugs/exclude.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
        }
    }
}

publishing {
    publications {
        javaLibrary(MavenPublication) {
            from components.java
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = Project.getName()
                description = "A Java wrapper for ngrok"
                url = "http://github.com/alexdlaird/java-ngrok"
                licenses {
                    license {
                        name = "The MIT License (MIT)"
                        url = "https://github.com/alexdlaird/java-ngrok/blob/master/LICENSE"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "alexdlaird"
                        name = "Alex Laird"
                        email = "contact@alexlaird.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/alexdlaird/java-ngrok.git"
                    developerConnection = "scm:git:ssh://github.com/alexdlaird/java-ngrok.git"
                    url = "http://github.com/alexdlaird/java-ngrok"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.javaLibrary
}

javadoc {
    options.overview = "src/main/java/overview.html"
    options.addStringOption("Xdoclint:none", "-quiet")
    options.addBooleanOption("html5", true)
    options.addBooleanOption("-allow-script-in-comments", true)
    options.header(file("src/main/resources/header.html").text)
}
