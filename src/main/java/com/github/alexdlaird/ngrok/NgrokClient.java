/*
 * Copyright (c) 2021-2025 Alex Laird
 *
 * SPDX-License-Identifier: MIT
 */

package com.github.alexdlaird.ngrok;

import com.github.alexdlaird.exception.JavaNgrokException;
import com.github.alexdlaird.exception.JavaNgrokHTTPException;
import com.github.alexdlaird.exception.JavaNgrokSecurityException;
import com.github.alexdlaird.http.DefaultHttpClient;
import com.github.alexdlaird.http.HttpClient;
import com.github.alexdlaird.http.HttpClientException;
import com.github.alexdlaird.http.Response;
import com.github.alexdlaird.ngrok.conf.JavaNgrokConfig;
import com.github.alexdlaird.ngrok.conf.JavaNgrokVersion;
import com.github.alexdlaird.ngrok.installer.NgrokInstaller;
import com.github.alexdlaird.ngrok.installer.NgrokVersion;
import com.github.alexdlaird.ngrok.process.NgrokProcess;
import com.github.alexdlaird.ngrok.protocol.BindTls;
import com.github.alexdlaird.ngrok.protocol.CreateTunnel;
import com.github.alexdlaird.ngrok.protocol.Proto;
import com.github.alexdlaird.ngrok.protocol.Tunnel;
import com.github.alexdlaird.ngrok.protocol.Tunnels;
import com.github.alexdlaird.ngrok.protocol.Version;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import static com.github.alexdlaird.util.StringUtils.isBlank;
import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;

/**
 * A client for interacting with <a href="https://ngrok.com/docs" target="_blank">ngrok</a>, its binary, and its APIs.
 * Can be configured with {@link JavaNgrokConfig}.
 * <h2>Basic Usage</h2>
 * <h3>Open a Tunnel</h3>
 * To open a tunnel, use the {@link NgrokClient#connect(CreateTunnel) NgrokClient.connect()} method, which returns a
 * {@link Tunnel}, and this returned object has a reference to the public URL generated by <code>ngrok</code> in its
 * {@link Tunnel#getPublicUrl()} method.
 *
 * <p><pre>
 * final NgrokClient ngrokClient = new NgrokClient.Builder().build();
 *
 * // Open a HTTP tunnel on the default port 80
 * // &lt;Tunnel: "https://&lt;public_sub&gt;.ngrok.io" -&gt; "http://localhost:80"&gt;
 * final Tunnel httpTunnel = ngrokClient.connect();
 *
 * // Open a SSH tunnel
 * // &lt;Tunnel: "tcp://0.tcp.ngrok.io:12345" -&gt; "localhost:22"&gt;
 * final CreateTunnel sshCreateTunnel = new CreateTunnel.Builder()
 *         .withProto(Proto.TCP)
 *         .withAddr(22)
 *         .build();
 * final Tunnel sshTunnel = ngrokClient.connect(sshCreateTunnel);
 *
 * // Open a named tunnel from the config file
 * final CreateTunnel createNamedTunnel = new CreateTunnel.Builder()
 *         .withName("my-config-file-tunnel")
 *         .build();
 * final Tunnel namedTunnel = ngrokClient.connect(createNamedTunnel);
 * </pre>
 *
 * <p>The {@link NgrokClient#connect(CreateTunnel) NgrokClient.connect()} method can also take a {@link CreateTunnel}
 * (which can be built through {@link CreateTunnel.Builder its Builder}), which allows us to pass additional tunnel
 * configurations that are supported by <code>ngrok</code> (or {@link CreateTunnel.Builder#withName(String)} to use a
 * tunnel defined in <code>ngrok</code>`'s config file), <a href="#tunnel-configurations">as documented here</a>.
 *
 * <p><p><code>java-ngrok</code> is compatible with <code>ngrok</code> v2 and v3, but by default it will install v3. To
 * install v2 instead, set the version with {@link JavaNgrokConfig.Builder#withNgrokVersion(NgrokVersion)} and
 * {@link CreateTunnel.Builder#withNgrokVersion(NgrokVersion)}.
 *
 * <p><strong>Note:</strong> <code>ngrok</code> v2's default behavior for <code>http</code> when no additional
 * properties are passed is to open <em>two</em> tunnels, one <code>http</code> and one <code>https</code>. This method
 * will return a reference to the <code>http</code> tunnel in this case. If only a single tunnel is needed, call
 * {@link CreateTunnel.Builder#withBindTls(BindTls)} with {@link BindTls#TRUE} and a reference to the
 * <code>https</code> tunnel will be returned.
 * <h3><code>ngrok</code>'s Edge</h3>
 * To use <a href="https://ngrok.com/docs/network-edge/edges/" target="_blank"><code>ngrok</code>'s Edges</a> with
 * <code>java-ngrok</code>, first <a href="ttps://dashboard.ngrok.com/edges" target="_blank">configure an
 * Edge on <code>ngrok</code>'s dashboard</a> (with at least one Endpoint mapped to the Edge), and define a labeled
 * tunnel in <a href="https://ngrok.com/docs/agent/config/v2/#define-two-labeled-tunnels" target="_blank">the
 * <code>ngrok</code> config file</a> that points to the Edge.
 *
 * <p><pre>
 * tunnels:
 *   some-edge-tunnel:
 *     labels:
 *       - edge=my_edge_id
 *     addr: http://localhost:80
 * </pre>
 * To start a labeled tunnel in <code>java-ngrok</code>, set {@link CreateTunnel.Builder#withName(String)}.
 *
 * <p><pre>
 * final NgrokClient ngrokClient = new NgrokClient.Builder().build();
 *
 * // Open a named tunnel from the config file
 * final CreateTunnel createNamedTunnel = new CreateTunnel.Builder()
 *         .withName("some-edge-tunnel")
 *         .build();
 * final Tunnel namedTunnel = ngrokClient.connect(createNamedTunnel);
 * </pre>
 * Once an Edge tunnel is started, it can be managed through
 * <a href="ttps://dashboard.ngrok.com/edges" target="_blank"><code>ngrok</code>'s dashboard</a>.
 * <h3>Get Active Tunnels</h3>
 * It can be useful to ask the <code>ngrok</code> client what tunnels are currently open. This can be accomplished with
 * the {@link NgrokClient#getTunnels()} method, which returns a list of {@link Tunnel} objects.
 *
 * <p><pre>
 * [&lt;Tunnel: "https://&lt;public_sub&gt;.ngrok.io" -&gt; "http://localhost:80"&gt;]
 * final List&lt;Tunnel&gt; tunnels = ngrokClient.getTunnels();
 * </pre>
 * <h3>Close a Tunnel</h3>
 * All open tunnels will automatically be closed when the Java process terminates, but we can also close them manually
 * with {@link NgrokClient#disconnect(String)}.
 *
 * <p><pre>
 * // The Tunnel returned from methods like connect(), getTunnels(), etc. contains the public URL
 * ngrokClient.disconnect(publicUrl);
 * </pre>
 * <h3>Expose Other Services</h3>
 * Using <code>ngrok</code> we can expose any number of non-HTTP services, for instances databases, game servers, etc.
 * This can be accomplished by using <code>java-ngrok</code> to open a <code>tcp</code> tunnel to the desired service.
 *
 * <p><pre>
 * final NgrokClient ngrokClient = new NgrokClient.Builder().build();
 *
 * // Open a tunnel to MySQL with a Reserved TCP Address
 * // &lt;NgrokTunnel: "tcp://1.tcp.ngrok.io:12345" -&gt; "localhost:3306"&gt;
 * final CreateTunnel mysqlCreateTunnel = new CreateTunnel.Builder()
 *         .withProto(Proto.TCP)
 *         .withAddr(3306)
 *         .withRemoteAddr("1.tcp.ngrok.io:12345")
 *         .build();
 * final Tunnel mysqlTunnel = ngrokClient.connect(mysqlCreateTunnel);
 * </pre>
 *
 * <p>We can also serve up local directories via
 * <a href="https://ngrok.com/docs/http/#file-serving" target="_blank">ngrok's built-in
 * fileserver</a>.
 *
 * <p><pre>
 * final NgrokClient ngrokClient = new NgrokClient.Builder().build();
 *
 * // Open a tunnel to a local file server
 * // &lt;NgrokTunnel: "https://&lt;public_sub&gt;.ngrok.io" -&gt; "file:///"&gt;
 * final CreateTunnel fileserverCreateTunnel = new CreateTunnel.Builder()
 *         .withAddr("file:///)
 *         .build();
 * final Tunnel fileserverTunnel = ngrokClient.connect(fileserverCreateTunnel);
 * </pre>
 * <h3 id="tunnel-configurations">Tunnel Configurations</h3>
 * It is possible to configure the tunnel when it is created, for instance adding authentication, a subdomain, or other
 * additional <a href="https://ngrok.com/docs/agent/config/v2/#common-tunnel-configuration-properties"
 * target="_blank">tunnel configurations that are supported by ngrok</a>. This is accomplished by using
 * {@link CreateTunnel.Builder} to set what properties will be used when the tunnel is created.
 *
 * <p>Here is an example that opens a tunnel with subdomain <code>foo</code>, requires basic authentication for
 * requests, and defines a circuit breaker.
 *
 * <pre>
 * final NgrokClient ngrokClient = new NgrokClient.Builder().build();
 *
 * final CreateTunnel createTunnel = new CreateTunnel.Builder()
 *         .withSubdomain("foo")
 *         .withAuth("username:password"")
 *         .withCircuitBreaker(50)
 *         .build();
 *
 * final Tunnel tunnel = ngrokClient.connect(createTunnel);
 * </pre>
 *
 * <p>If we already have a tunnel
 * <a href ="https://ngrok.com/docs/agent/config/v2/#tunnel-configurations" target="_blank">defined in
 * <code>ngrok</code>'s config file</a>, we can start it by its <code>name</code>.</p>
 *
 * <pre>
 * final NgrokClient ngrokClient = new NgrokClient.Builder().build();
 *
 * final CreateTunnel createTunnel = new CreateTunnel.Builder()
 *         .withName("my-config-file-tunnel")
 *         .build();
 *
 * final Tunnel tunnel = ngrokClient.connect(createTunnel);
 * </pre>
 * <h2>Integration Examples</h2>
 * <code>java-ngrok</code> is useful in any number of integrations, for instance to test locally without having to
 * deploy or configure. Here are some common usage examples.
 *
 * <p><ul>
 * <li><a href="https://github.com/alexdlaird/java-ngrok-example-spring" target="_blank">Spring</a>
 * <li><a href="https://github.com/alexdlaird/java-ngrok-example-dropwizard" target="_blank">Dropwizard</a>
 * <li><a href="https://github.com/alexdlaird/java-ngrok-example-play" target="_blank">Play (Scala)</a>
 * <li><a href="https://gist.github.com/alexdlaird/522cba505b0a9f935f65036355c46f4a" target="_blank">Java HTTP
 * Server</a></li>
 * <li><a href="https://github.com/alexdlaird/java-ngrok-example-tcp-server-and-client" target="_blank">Java
 * TCP Server and Client</a></li>
 * </ul>
 */
public class NgrokClient {

    private static final Logger LOGGER = Logger.getLogger(String.valueOf(NgrokClient.class));

    private final Map<String, Tunnel> currentTunnels = new HashMap<>();

    private final String javaNgrokVersion;
    private final JavaNgrokConfig javaNgrokConfig;
    private final NgrokProcess ngrokProcess;
    private final HttpClient httpClient;

    private NgrokClient(final Builder builder) {
        this.javaNgrokVersion = builder.javaNgrokVersion;
        this.javaNgrokConfig = builder.javaNgrokConfig;
        this.ngrokProcess = builder.ngrokProcess;
        this.httpClient = builder.httpClient;
    }

    /**
     * Establish a new <code>ngrok</code> tunnel for the Tunnel creation request, returning an object representing the
     * connected tunnel.
     *
     * <p>If a <a href="https://ngrok.com/docs/agent/config/v2/#tunnel-configurations"
     * target="_blank">tunnel definition in ngrok's config file</a> matches the given
     * {@link CreateTunnel.Builder#withName(String)}, it will be loaded and used to start the tunnel. When
     * {@link CreateTunnel.Builder#withName(String)} is not set and a "java-ngrok-default" tunnel definition exists in
     * <code>ngrok</code>'s config, it will be loaded and used. Any properties defined on {@link CreateTunnel} will
     * override properties from the loaded tunnel definition.
     *
     * <p>If <code>ngrok</code> is not installed at {@link JavaNgrokConfig}'s <code>ngrokPath</code>, calling this
     * method will first download and install <code>ngrok</code>.
     *
     * <p><code>java-ngrok</code> is compatible with <code>ngrok</code> v2 and v3, but by default it will install v2.
     * To install v3 instead, set the version with {@link JavaNgrokConfig.Builder#withNgrokVersion(NgrokVersion)} and
     * {@link CreateTunnel.Builder#withNgrokVersion(NgrokVersion)}.
     *
     * <p>If <code>ngrok</code> is not running, calling this method will first start a process with
     * {@link JavaNgrokConfig}.
     *
     * <p><strong>Note:</strong> <code>ngrok</code> v2's default behavior for <code>http</code> when no additional
     * properties are passed is to open <em>two</em> tunnels, one <code>http</code> and one <code>https</code>. This
     * method will return a reference to the <code>http</code> tunnel in this case. If only a single tunnel is needed,
     * call {@link CreateTunnel.Builder#withBindTls(BindTls)} with {@link BindTls#TRUE} and a reference to the
     * <code>https</code> tunnel will be returned.
     *
     * @param createTunnel The tunnel definition.
     * @return The created Tunnel.
     * @throws JavaNgrokException         The tunnel definition was invalid, or response was incompatible with
     *                                    <code>java-ngrok</code>.
     * @throws JavaNgrokHTTPException     An HTTP error occurred communicating with the <code>ngrok</code> API.
     * @throws JavaNgrokSecurityException The URL was not supported.
     */
    public Tunnel connect(final CreateTunnel createTunnel) {
        ngrokProcess.start();

        final CreateTunnel finalTunnel = interpolateTunnelDefinition(createTunnel);

        LOGGER.info(String.format("Opening tunnel named: %s", finalTunnel.getName()));

        final Response<Tunnel> response;
        try {
            response = httpClient.post(String.format("%s/api/tunnels", ngrokProcess.getApiUrl()), finalTunnel,
                    Tunnel.class);
        } catch (final HttpClientException e) {
            throw new JavaNgrokHTTPException(String.format("An error occurred when POSTing to create the tunnel %s.",
                    finalTunnel.getName()), e, e.getUrl(), e.getStatusCode(), e.getBody());
        }

        final Tunnel tunnel;
        if (javaNgrokConfig.getNgrokVersion() == NgrokVersion.V2
                && finalTunnel.getProto() == Proto.HTTP
                && finalTunnel.getBindTls() == BindTls.BOTH) {
            try {
                final Response<Tunnel> getResponse = httpClient.get(ngrokProcess.getApiUrl()
                                + response.getBody().getUri() + "%20%28http%29",
                        Tunnel.class);
                tunnel = getResponse.getBody();
            } catch (final HttpClientException e) {
                throw new JavaNgrokHTTPException(String.format("An error occurred when GETing the HTTP tunnel %s.",
                        response.getBody().getName()), e, e.getUrl(), e.getStatusCode(), e.getBody());
            }
        } else {
            tunnel = response.getBody();
        }

        applyEdgeToTunnel(tunnel);

        currentTunnels.put(tunnel.getPublicUrl(), tunnel);

        return tunnel;
    }

    /**
     * See {@link #connect(CreateTunnel)}.
     */
    public Tunnel connect() {
        return connect(new CreateTunnel.Builder().withNgrokVersion(javaNgrokConfig.getNgrokVersion()).build());
    }

    /**
     * Disconnect the <code>ngrok</code> tunnel for the given URL, if open.
     *
     * @param publicUrl The public URL of the tunnel to disconnect.
     * @throws JavaNgrokHTTPException     An HTTP error occurred communicating with the <code>ngrok</code> API.
     * @throws JavaNgrokSecurityException The URL was not supported.
     */
    public void disconnect(final String publicUrl) {
        // If ngrok is not running, there are no tunnels to disconnect
        if (!ngrokProcess.isRunning()) {
            return;
        }

        if (!currentTunnels.containsKey(publicUrl)) {
            getTunnels();

            // One more check, if the given URL is still not in the list of tunnels, it is not active
            if (!currentTunnels.containsKey(publicUrl)) {
                return;
            }
        }

        final Tunnel tunnel = currentTunnels.get(publicUrl);

        ngrokProcess.start();

        LOGGER.info(String.format("Disconnecting tunnel: %s", tunnel.getPublicUrl()));

        try {
            httpClient.delete(ngrokProcess.getApiUrl() + tunnel.getUri());
        } catch (final HttpClientException e) {
            throw new JavaNgrokHTTPException(String.format("An error occurred when DELETing the tunnel %s.",
                    publicUrl), e, e.getUrl(), e.getStatusCode(), e.getBody());
        }
    }

    /**
     * Get a list of active <code>ngrok</code> tunnels.
     *
     * <p>If <code>ngrok</code> is not running, calling this method will first start a process with
     * {@link JavaNgrokConfig}.
     *
     * @return The active <code>ngrok</code> tunnels.
     * @throws JavaNgrokException         The response was invalid or not compatible with <code>java-ngrok</code>.
     * @throws JavaNgrokHTTPException     An HTTP error occurred communicating with the <code>ngrok</code> API.
     * @throws JavaNgrokSecurityException The URL was not supported.
     */
    public List<Tunnel> getTunnels() {
        ngrokProcess.start();

        try {
            final Response<Tunnels> response = httpClient.get(String.format("%s/api/tunnels",
                    ngrokProcess.getApiUrl()), Tunnels.class);

            currentTunnels.clear();
            for (final Tunnel tunnel : response.getBody().getTunnels()) {
                applyEdgeToTunnel(tunnel);
                currentTunnels.put(tunnel.getPublicUrl(), tunnel);
            }

            final List<Tunnel> sortedTunnels = new ArrayList<>(currentTunnels.values());
            sortedTunnels.sort(Comparator.comparing(Tunnel::getProto));
            return Collections.unmodifiableList(sortedTunnels);
        } catch (final HttpClientException e) {
            throw new JavaNgrokHTTPException("An error occurred when GETing the tunnels.", e, e.getUrl(),
                    e.getStatusCode(), e.getBody());
        }
    }

    /**
     * Get the latest metrics for the given {@link Tunnel} and update its <code>metrics</code> attribute.
     *
     * @param tunnel The Tunnel to update.
     * @throws JavaNgrokException         The API did not return <code>metrics</code>.
     * @throws JavaNgrokSecurityException The URL was not supported.
     */
    public void refreshMetrics(final Tunnel tunnel) {
        Response<Tunnel> latestTunnel = httpClient.get(String.format("%s%s", ngrokProcess.getApiUrl(),
                tunnel.getUri()), Tunnel.class);

        if (isNull(latestTunnel.getBody().getMetrics()) || latestTunnel.getBody().getMetrics().isEmpty()) {
            throw new JavaNgrokException("The ngrok API did not return \"metrics\" in the response");
        }

        tunnel.setMetrics(latestTunnel.getBody().getMetrics());
    }

    /**
     * Terminate the <code>ngrok</code> processes, if running. This method will not block, it will just issue a kill
     * request.
     */
    public void kill() {
        ngrokProcess.stop();

        currentTunnels.clear();
    }

    /**
     * Set the <code>ngrok</code> auth token in the config file, enabling authenticated features (for instance,
     * opening multiple concurrent tunnels, custom domains, etc.).
     *
     * @param authToken The auth token.
     */
    public void setAuthToken(final String authToken) {
        ngrokProcess.setAuthToken(authToken);
    }

    /**
     * Set the <code>ngrok</code> API key in the config file, enabling more features (for instance, labeled tunnels).
     *
     * @param apiKey The API key.
     */
    public void setApiKey(final String apiKey) {
        ngrokProcess.setApiKey(apiKey);
    }

    /**
     * Update <code>ngrok</code>, if an update is available.
     */
    public void update() {
        ngrokProcess.update();
    }

    /**
     * Get the <code>ngrok</code> and <code>java-ngrok</code> version.
     *
     * @return The versions.
     */
    public Version getVersion() {
        final String ngrokVersion = ngrokProcess.getVersion();

        return new Version(ngrokVersion, javaNgrokVersion);
    }

    /**
     * Get the <code>java-ngrok</code> to use when interacting with the <code>ngrok</code> binary.
     */
    public JavaNgrokConfig getJavaNgrokConfig() {
        return javaNgrokConfig;
    }

    /**
     * Get the class used to manage the <code>ngrok</code> binary.
     */
    public NgrokProcess getNgrokProcess() {
        return ngrokProcess;
    }

    /**
     * Get the class used to make HTTP requests to <code>ngrok</code>'s APIs.
     */
    public HttpClient getHttpClient() {
        return httpClient;
    }

    private void applyEdgeToTunnel(final Tunnel tunnel) {
        if ((isNull(tunnel.getPublicUrl()) || tunnel.getPublicUrl().isEmpty())
                && nonNull(javaNgrokConfig.getApiKey()) && nonNull(tunnel.getId())) {
            final Map<String, String> ngrokApiHeaders = new HashMap<>();
            ngrokApiHeaders.put("Authorization", String.format("Bearer %s", javaNgrokConfig.getApiKey()));
            ngrokApiHeaders.put("Ngrok-Version", "2");
            final Response<Map> tunnelResponse = httpClient.get(String.format("https://api.ngrok.com/tunnels/%s",
                    tunnel.getId()), Collections.emptyList(), ngrokApiHeaders, Map.class);

            if (!tunnelResponse.getBody().containsKey("labels")
                    || !(tunnelResponse.getBody().get("labels") instanceof Map)
                    || !((Map) tunnelResponse.getBody().get("labels")).containsKey("edge")) {
                throw new JavaNgrokException(String.format("Tunnel %s does not have 'labels', use a Tunnel "
                        + "configured on an Edge.", tunnel.getId()));
            }

            final String edge = (String) ((Map) tunnelResponse.getBody().get("labels")).get("edge");
            final String edgesPrefix;
            if (edge.startsWith("edghts_")) {
                edgesPrefix = "https";
            } else if (edge.startsWith("edgtcp")) {
                edgesPrefix = "tcp";
            } else if (edge.startsWith("edgtls")) {
                edgesPrefix = "tls";
            } else {
                throw new JavaNgrokException(String.format("Unknown Edge prefix: %s.", edge));
            }

            final Response<Map> edgeResponse = httpClient.get(String.format("https://api.ngrok.com/edges/%s/%s",
                    edgesPrefix, edge), Collections.emptyList(), ngrokApiHeaders, Map.class);

            if (!edgeResponse.getBody().containsKey("hostports")
                    || !(edgeResponse.getBody().get("hostports") instanceof List)
                    || ((List) edgeResponse.getBody().get("hostports")).isEmpty()) {
                throw new JavaNgrokException(String.format("No Endpoint is attached to your Edge %s, "
                                + "login to the ngrok dashboard to attach an Endpoint to "
                                + "your Edge first.",
                        edge));
            }

            tunnel.setPublicUrl(String.format("%s://%s", edgesPrefix,
                    ((List) edgeResponse.getBody().get("hostports")).get(0)));
            tunnel.setProto(edgesPrefix);
        }
    }

    private CreateTunnel interpolateTunnelDefinition(final CreateTunnel createTunnel) {
        final CreateTunnel.Builder createTunnelBuilder = new CreateTunnel.Builder(createTunnel);

        final Map<String, Object> config;
        if (Files.exists(javaNgrokConfig.getConfigPath())) {
            config = ngrokProcess.getNgrokInstaller().getNgrokConfig(javaNgrokConfig.getConfigPath());
        } else {
            config = ngrokProcess.getNgrokInstaller().getDefaultConfig(javaNgrokConfig.getNgrokVersion(),
                    javaNgrokConfig.getConfigVersion());
        }

        final String name;
        final Map<String, Object> tunnelDefinitions = (Map<String, Object>) config.getOrDefault("tunnels",
            Collections.emptyMap());
        if (isNull(createTunnel.getName()) && tunnelDefinitions.containsKey("java-ngrok-default")) {
            name = "java-ngrok-default";
            createTunnelBuilder.withName(name);
        } else {
            name = createTunnel.getName();
        }

        if (nonNull(name) && tunnelDefinitions.containsKey(name)) {
            if (((Map<String, Object>) tunnelDefinitions.get(name)).containsKey("labels")
                    && isBlank(javaNgrokConfig.getApiKey())) {
                throw new JavaNgrokException("'JavaNgrokConfig.apiKey' must be set when 'labels' is "
                        + "on the tunnel definition.");
            }

            createTunnelBuilder.withTunnelDefinition((Map<String, Object>) tunnelDefinitions.get(name));
        }

        return createTunnelBuilder.build();
    }

    /**
     * Builder for a {@link NgrokClient}, see docs for that class for example usage.
     */
    public static class Builder {

        private String javaNgrokVersion;
        private JavaNgrokConfig javaNgrokConfig;
        private NgrokInstaller ngrokInstaller;
        private NgrokProcess ngrokProcess;
        private HttpClient httpClient;

        /**
         * The <code>java-ngrok</code> to use when interacting with the <code>ngrok</code> binary.
         */
        public Builder withJavaNgrokConfig(final JavaNgrokConfig javaNgrokConfig) {
            this.javaNgrokConfig = javaNgrokConfig;
            return this;
        }

        /**
         * The class used to download and install <code>ngrok</code>. Only needed if
         * {@link #withNgrokProcess(NgrokProcess)} is not called.
         */
        public Builder withNgrokInstaller(final NgrokInstaller ngrokInstaller) {
            this.ngrokInstaller = ngrokInstaller;
            return this;
        }

        /**
         * The class used to manage the <code>ngrok</code> binary.
         */
        public Builder withNgrokProcess(final NgrokProcess ngrokProcess) {
            this.ngrokProcess = ngrokProcess;
            return this;
        }

        /**
         * The class used to make HTTP requests to <code>ngrok</code>'s APIs.
         */
        public Builder withHttpClient(final HttpClient httpClient) {
            this.httpClient = httpClient;
            return this;
        }

        /**
         * Build the {@link NgrokClient}.
         */
        public NgrokClient build() {
            javaNgrokVersion = JavaNgrokVersion.getInstance().getVersion();

            if (isNull(javaNgrokConfig)) {
                javaNgrokConfig = new JavaNgrokConfig.Builder().build();
            }
            if (isNull(ngrokInstaller)) {
                ngrokInstaller = new NgrokInstaller();
            }
            if (isNull(ngrokProcess)) {
                ngrokProcess = new NgrokProcess(javaNgrokConfig, ngrokInstaller);
            }
            if (isNull(httpClient)) {
                httpClient = new DefaultHttpClient.Builder().build();
            }

            return new NgrokClient(this);
        }
    }
}
